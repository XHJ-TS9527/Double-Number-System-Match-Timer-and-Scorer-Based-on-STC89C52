ORG 0000H
AJMP MAIN
ORG 0003H
LJMP INT0INT ;A队得分中断
ORG 000BH
LJMP T0INT	;T0中断
ORG 0013H
LJMP INT1INT ;B队得分中断
ORG 001BH
LJMP T1INT ;T1中断
ORG 002BH 
LJMP T2INT ;T2中断
ORG 0030H
MAIN:
MOV SP,#60H ;堆栈上移
LCALL INITIALIZATION_PROG ;初始化
LCALL ENTER_TIME ;输入定时时长,准确秒数高8位放在R1，低8位放在R2，R0-3是多少位的计时秒数
LCALL START_RACE ;开始比赛
LCALL SCAN_MATCH ;比赛中途
LCALL END_RACE ;比赛结束，蜂鸣和显示结果
AJMP MAIN

;;;;;;;;;;;;;;;;;;;;;;;;;初始化程序;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INITIALIZATION_PROG:
CLR RS0
CLR RS1 ;选择工作寄存器区为0区
TH2 EQU 0CDH
TL2 EQU 0CCH
RLDH EQU 0CBH
RLDL EQU 0CAH
T2MOD EQU 0C9H
T2CON EQU 0C8H
TF2 EQU 0CFH
ET2 EQU 0ADH
TR2 EQU 0CAH ;T2相关控制寄存器的地址
RCLK EQU P3.5
SRCLK EQU P3.6 ;点阵时钟口地址
;存放共阴段码表
MOV R0,#80H
MOV @R0,#3FH ;0
INC R0
MOV @R0,#06H ;1
INC R0
MOV @R0,#5BH ;2
INC R0
MOV @R0,#4FH ;3
INC R0
MOV @R0,#66H ;4
INC R0
MOV @R0,#6DH ;5
INC R0
MOV @R0,#7DH ;6
INC R0
MOV @R0,#07H ;7
INC R0
MOV @R0,#7FH ;8
INC R0
MOV @R0,#6FH ;9
INC R0
MOV @R0,#77H ;A
INC R0
MOV @R0,#7CH ;B
INC R0
MOV @R0,#39H ;C
INC R0
MOV @R0,#5EH ;D
INC R0
MOV @R0,#79H ;E
INC R0
MOV @R0,#71H ;F
;存放点阵字库
MOV R0,#90H
MOV @R0,#00H ;AWIN 90H
INC R0
MOV @R0,#3FH
INC R0
MOV @R0,#48H
INC R0
MOV @R0,#88H
INC R0
MOV @R0,#88H
INC R0
MOV @R0,#48H
INC R0
MOV @R0,#3FH
INC R0
MOV @R0,#00H
INC R0
MOV @R0,#00H ;BWIN 98H
INC R0
MOV @R0,#0FFH
INC R0
MOV @R0,#91H
INC R0
MOV @R0,#91H
INC R0
MOV @R0,#91H
INC R0
MOV @R0,#99H
INC R0
MOV @R0,#66H
INC R0
MOV @R0,#00H
INC R0
MOV @R0,#88H ;平手 A0H
INC R0
MOV @R0,#0A8H
INC R0
MOV @R0,#98H
INC R0
MOV @R0,#0FFH
INC R0
MOV @R0,#0FFH
INC R0
MOV @R0,#98H
INC R0
MOV @R0,#0A8H
INC R0
MOV @R0,#88H
INC R0
MOV @R0,#69H ;0 A8H
INC R0
MOV @R0,#96H
INC R0
MOV @R0,#59H ;1 AAH
INC R0
MOV @R0,#0F1H
INC R0
MOV @R0,#9BH ;2 ACH
INC R0
MOV @R0,#0D9H
INC R0
MOV @R0,#9DH ;3 AEH
INC R0
MOV @R0,#0BFH
INC R0
MOV @R0,#6AH ;4 B0H
INC R0
MOV @R0,#0F2H
INC R0
MOV @R0,#9DH ;5 B2H
INC R0
MOV @R0,#0B9H
INC R0
MOV @R0,#6DH ;6 B4H
INC R0
MOV @R0,#0DAH
INC R0
MOV @R0,#89H ;7 B6H
INC R0
MOV @R0,#0ACH
INC R0
MOV @R0,#0FDH ;8 B8H
INC R0
MOV @R0,#0DFH
INC R0
MOV @R0,#5BH ;9 BAH
INC R0
MOV @R0,#0B6H
INC R0
MOV @R0,#7AH ;A BCH
INC R0
MOV @R0,#0A7H
INC R0
MOV @R0,#0F5H ;B BDH
INC R0
MOV @R0,#57H
INC R0
MOV @R0,#0F9H ;C C0H
INC R0
MOV @R0,#99H
INC R0
MOV @R0,#75H ;D C2H
INC R0
MOV @R0,#5FH
INC R0
MOV @R0,#0FBH ;E C4H
INC R0
MOV @R0,#0DDH
INC R0
MOV @R0,#0FAH ;F C6H
INC R0
MOV @R0,#0AAH
;存放音乐数据
MOV R0,#0CAH
MOV @R0,#0FEH ;高DO CAH
INC R0
MOV @R0,#2AH
INC R0
MOV @R0,#0FDH ;中SO CCH
INC R0
MOV @R0,#8AH
INC R0
MOV @R0,#0FCH ;中DO CEH
INC R0
MOV @R0,#4CH
INC R0
MOV @R0,#0FCH ;中RUI D0H
INC R0
MOV @R0,#0B4H
INC R0
MOV @R0,#0FDH ;中LA升半音 D2H
INC R0
MOV @R0,#0EFH
INC R0
MOV @R0,#0FEH ;高DO D4H
INC R0
MOV @R0,#2AH
INC R0
MOV @R0,#0FCH ;中LA D6H
INC R0
MOV @R0,#0C2H
INC R0
MOV @R0,#0FDH ;中LA升半音 D8H
INC R0
MOV @R0,#0EFH
INC R0
MOV @R0,#0FCH ;中LA DAH
INC R0
MOV @R0,#0C2H
INC R0
MOV @R0,#0FAH ;低MI DCH
INC R0
MOV @R0,#1DH
INC R0
MOV @R0,#0FCH ;中DO DEH
INC R0
MOV @R0,#4CH
;设置定时器工作模式
MOV TMOD,#21H ;T0工作在模式1，T1工作在模式2
MOV TCON,#00H ;两个外部中断低电平触发
MOV T2MOD,#00H
MOV T2CON,#02H ;计数器T2工作模式（16位自动重装） 
;清理一些标志位
CLR 00H	;比赛开始位
CLR 01H	;键盘输入位
CLR 02H	;比赛暂停位
CLR 03H ;分数进制位
CLR 04H ;比赛结果显示位 
CLR REN
;初始化队伍分数为0
MOV 30H,#00H
MOV 31H,#00H
;中断优先级
MOV IP,#2AH
;关中断
MOV IE,#00H
;载入定时器初值
MOV TH2,#0F0H
MOV TL2,#5FH
MOV RLDH,#0F0H
MOV RLDL,#5FH ;T2
MOV TL1,#06H
MOV TH1,#06H ;T1
MOV TL0,0CBH
MOV TH0,0CAH ;T0
MOV 53H,#0FEH ;T0初值
MOV 54H,#22H
MOV 40H,#00H ;清空比赛结果
MOV 55H,#0CAH ;音乐步骤
MOV 51H,#00H
LCALL MATRIX_SENDBYTE
SETB RCLK
CLR RCLK ;清空点阵，确保数码管清晰可见
RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;键盘输入程序;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ENTER_TIME:	;最终四位数的各位值存放在0区R3~R6中,具体的位数是0区R0-3位
MOV R0,#03H
MOV @R0,#0
KEYBOARD_INPUT:
LCALL KEYBOARD_SCAN
CJNE R7,#77H,SECOND
CJNE R0,#07H,INPUT1
AJMP ILLEAGLE_INPUT
INPUT1:
MOV @R0,#1 ;键入1
AJMP NUM_INPUT
SECOND:
CJNE R7,#7BH,THIRD
CJNE R0,#07H,INPUT2
AJMP ILLEAGLE_INPUT
INPUT2:
MOV @R0,#2 ;键入2
AJMP NUM_INPUT
THIRD:
CJNE R7,#7DH,FORTH
CJNE R0,#07H,INPUT3
AJMP ILLEAGLE_INPUT
INPUT3:
MOV @R0,#3 ;键入3
AJMP NUM_INPUT
FORTH:
CJNE R7,#7EH,FIFTH
CJNE R0,#03H,BACKSPACE
AJMP ILLEAGLE_INPUT
BACKSPACE:
DEC R0 ;键入退格
AJMP ILLEAGLE_INPUT
FIFTH:
CJNE R7,#0B7H,SIXTH
CJNE R0,#07H,INPUT4
AJMP ILLEAGLE_INPUT
INPUT4:
MOV @R0,#4 ;键入4
AJMP NUM_INPUT
SIXTH:
CJNE R7,#0BBH,SEVENTH
CJNE R0,#07H,INPUT5
AJMP ILLEAGLE_INPUT
INPUT5:
MOV @R0,#5 ;键入5
AJMP NUM_INPUT
SEVENTH:
CJNE R7,#0BDH,EIGHTH
CJNE R0,#07H,INPUT6
AJMP ILLEAGLE_INPUT
INPUT6:
MOV @R0,#6 ;键入6
AJMP NUM_INPUT
EIGHTH:
CJNE R7,#0D7H,NINTH
CJNE R0,#07H,INPUT7
AJMP ILLEAGLE_INPUT
INPUT7:
MOV @R0,#7 ;键入7
AJMP NUM_INPUT
NINTH:
CJNE R7,#0DBH,TENTH
CJNE R0,#07H,INPUT8
AJMP ILLEAGLE_INPUT
INPUT8:
MOV @R0,#8 ;键入8
AJMP NUM_INPUT
TENTH:
CJNE R7,#0DDH,ELEVENTH
CJNE R7,#07H,INPUT9
AJMP ILLEAGLE_INPUT
INPUT9:
MOV @R0,#9 ;键入9
AJMP NUM_INPUT
ELEVENTH:
CJNE R7,#0EBH,TWELVETH
CJNE R0,#07H,INPUT0
AJMP ILLEAGLE_INPUT
INPUT0:
MOV @R0,#0 ;键入0
AJMP NUM_INPUT
THIRTEEN:
CJNE R7,#0BEH,NEAR_ILLEAGLE_INPUT
MOV R0,#03H ;清空
NEAR_ILLEAGLE_INPUT:
AJMP ILLEAGLE_INPUT
TWELVETH:
CJNE R7,#0EEH,THIRTEEN
CLR 01H
MOV 16H,#00H
MOV 17H,#00H
;键入确认
;如果合法，那么总秒数低8位会存放在2区R7中，高8位存放在2区R6中
;各位存放在0区R3~R6中，位数+3放在0区R0中
CJNE R0,#07H,MAX_THREE_NUM
;有四位:R3:千位 R4:百位 R5:十位 R6:个位
MOV B,#10
MOV A,R5
MUL AB
ADD A,R6
MOV 15H,A ;10×十位+个位放在2区R5
MOV B,#100
MOV A,R4
MUL AB
ADD A,15H
XCH A,B
ADDC A,#00H
MOV 16H,A ;100×百位+10×十位+个位高8位放在2区R6
MOV 17H,B ;100×百位+10×十位+个位低8位放在2区R7
MOV B,#4
MOV A,R3
MUL AB
MOV B,#250
MUL AB
ADD A,17H
XCH A,B
ADDC A,16H
MOV 16H,A ;真正数据高8位放在2区R6
MOV 17H,B ;真正数据低8位放在2区R2
;去前导零
MOV A,R3
JNZ GO_TO_RETURN_4
MOV A,R4
MOV R3,A
MOV A,R5
MOV R4,A
MOV A,R6
MOV R5,A
DEC R0
MOV A,R3
JZ EXCLUDE_ZERO_3
GO_TO_RETURN_4:
RET
MAX_THREE_NUM:
CJNE R0,#06H,MAX_TWO_NUM
;有三位:R3:百位 R4:十位 R5:个位
MOV A,R4
MOV B,#10H
MUL AB
ADD A,R5
MOV 17H,A ;10×十位+个位放在2区R7
MOV A,R3
MOV B,#100
MUL AB
ADD A,17H
XCH A,B
ADDC A,#00H
MOV 16H,A ;真正数据高8位放在2区R6
MOV 17H,B ;真正数据低8位放在2区R7
;去前导零
EXCLUDE_ZERO_3:
MOV A,R3
JNZ GO_TO_RETURN_3
MOV A,R4
MOV R3,A
MOV A,R5
MOV R4,A
DEC R0
MOV A,R3
JZ EXCLUDE_ZERO_2
GO_TO_RETURN_3:
RET
MAX_TWO_NUM:
CJNE R0,#05H,MAX_ONE_NUM
;有两位:R3:十位 R4:个位
MOV A,R3
MOV B,#10
MUL AB
ADD A,R4
MOV 16H,#00H ;真正数据高8位放在2区R6
MOV 17H,A ;真正数据低8位放在2区R7
;去前导零
EXCLUDE_ZERO_2:
MOV A,R3
JNZ GO_TO_RETURN_2
MOV A,R4
MOV R3,A
DEC R0
GO_TO_RETURN_2:
RET
MAX_ONE_NUM:
CJNE R0,#04H,NO_NUMBER_INPUT
;有一位:R3:个位
MOV 16H,#00H ;真正数据高8位放在2区R6
MOV 17H,R3 ;真正数据低8位放在2区R7                                                                                                                                                                         
RET
NO_NUMBER_INPUT: ;没有输入，重新输入
AJMP ENTER_TIME
NUM_INPUT:
INC R0
ILLEAGLE_INPUT: ;输入无效
CLR 01H	;清除键盘输入标志位
AJMP KEYBOARD_INPUT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;键盘扫描程序;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
KEYBOARD_SCAN:
JB 01H,KEYBOARD_RETURN ;上一位扫描进来的信息还没取走，等待取走
SCAN:
LCALL DISPLAY_NUMBER_CONTENT
MOV P1,#0FH ;行线输出全0，列线输出全1
MOV A,P1 ;读入列线值
CJNE A,#0FH,BUTTON_DOWN
AJMP SCAN
BUTTON_DOWN: ;检测到有按键按下，进行消抖
MOV P1,#0FH
LCALL DELAY_KEYBOARD
MOV A,P1 ;再次检测有没有按下
CJNE A,#0FH, REAL_BUTTON_DOWN ;按键按下
AJMP SCAN ;没有按键按下，返回重新扫描
REAL_BUTTON_DOWN:
MOV R7,A ;将含0的列保存下来
MOV P1,#0F0H ;行线输出全1，列线输出全0
MOV A,P1 ;读入行线值
ORL A,R7 ;赋直接键值并存入R7
XCH A,R7
BUTTON_NOT_UP:
LCALL DISPLAY_NUMBER_CONTENT
MOV P1,#0FH ;开始检测按钮是否松开并消抖
MOV A,P1
CJNE A,#0FH,BUTTON_NOT_UP ;按键还没有松开
LCALL DELAY_KEYBOARD
MOV P1,#0FH
MOV A,P1
CJNE A,#0FH,BUTTON_NOT_UP
SETB 01H
KEYBOARD_RETURN:
RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;键盘扫描延时程序;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DELAY_KEYBOARD:	;12305个机器周期，延时12.305毫秒
SETB RS0
SETB RS1
MOV R7,#60
DELAY_LOOP1:
MOV R6,#100
DELAY_LOOP2:
DJNZ R6,DELAY_LOOP2
DJNZ R7,DELAY_LOOP1
CLR RS0
CLR RS1
RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;';计算数码管显示区域程序;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DISPLAY_NUMBER_CONTENT:
;队伍分数和计时初始化
SETB RS0 ;设置当前工作寄存器区为1区
MOV R0,#32H
MOV R1,#7
INI_DISPLAY:
MOV @R0,#00H
INC R0
DJNZ R1,INI_DISPLAY
;输入的计时秒数段码显示
MOV A,00H
CLR C
SUBB A,#03H
;1区R0用于记录当前查表位
;1区R1用于存放指针
MOV R2,#33H ;1区R2用于记录数码管尾址
MOV R3,#03H ;1区R3用于记录当前数的地址
MOV R4,A ;1区R4用于记录当前有多少个数
XCH A,R2
ADD A,R2
XCH A,R2
JZ DISP_END
CALC_AND_PUT:
MOV A,#80H
MOV R1,0BH ;将当前数的地址放入R1
ADD A,@R1 ;计算查哪个位
MOV R0,A
MOV A,@R0 ;查表
MOV R1,0AH ;将目标地址放入R1
MOV @R1,A ;存放段码
DEC R2
INC R3
DJNZ R4,CALC_AND_PUT ;循环放计时值
DISP_END:
JB 03H,HEX_TRANSLATE ;选择进制
TRANSFER_DIGIT:
;A队分数译码
MOV A,31H
MOV B,#10
DIV AB
ADD A,#80H ;分数的十位
MOV R0,A
MOV A,@R0 ;查表
MOV 39H,A ;放入十位的段码
MOV A,B
ADD A,#80H ;分数的个位
MOV R0,A
MOV A,@R0 ;查表
MOV 38H,A ;放入个位的段码
;B队分数译码
MOV A,30H
MOV B,#10
DIV AB
ADD A,#80H ;分数的十位
MOV R0,A
MOV A,@R0 ;查表
MOV 33H,A ;放入十位的段码
MOV A,B
ADD A,#80H
MOV R0,A
MOV A,@R0
MOV 32H,A ;放入个位的段码
AJMP CALL_DISPLAY_FUNC
HEX_TRANSLATE:
;A队分数译码
MOV A,31H
MOV B,#16
DIV AB
ADD A,#80H ;分数的十位
MOV R0,A
MOV A,@R0 ;查表
MOV 39H,A ;放入十位的段码
MOV A,B
ADD A,#80H ;分数的个位
MOV R0,A
MOV A,@R0 ;查表
MOV 38H,A ;放入个位的段码
;B队分数译码
MOV A,30H
MOV B,#16
DIV AB
ADD A,#80H ;分数的十位
MOV R0,A
MOV A,@R0 ;查表
MOV 33H,A ;放入十位的段码
MOV A,B
ADD A,#80H
MOV R0,A
MOV A,@R0
MOV 32H,A ;放入个位的段码
CALL_DISPLAY_FUNC:
CLR RS0 ;换回0区
LCALL DISPLAY_NUM_TUBE ;显示
RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;数码管动态显示程序;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DISPLAY_NUM_TUBE:
MOV P0,#00H ;灭灯
MOV P2,#00H ;位选第一数码管
MOV P0,32H ;显示32H单元的内容
LCALL DELAY_FOR_DIGIT_SHOW ;短延时
MOV P0,#00H ;消除余辉
MOV P2,#04H ;位选第二数码管
MOV P0,33H ;显示33H单元格内容
LCALL DELAY_FOR_DIGIT_SHOW
MOV P0,#00H	;消除余辉
MOV P2,#08H ;位选第三数码管 
MOV P0,34H ;显示34H单元的内容
LCALL DELAY_FOR_DIGIT_SHOW
MOV P0,#00H	;消除余辉
MOV P2,#0CH ;位选第四数码管
MOV P0,35H ;显示35H单元的内容
LCALL DELAY_FOR_DIGIT_SHOW
MOV P0,#00H	;消除余辉
MOV P2,#10H ;位选第五数码管 
MOV P0,36H ;显示36H单元的内容
LCALL DELAY_FOR_DIGIT_SHOW
MOV P0,#00H	;消除余辉
MOV P2,#14H ;位选第六数码管
MOV P0,37H ;显示37H单元的内容
LCALL DELAY_FOR_DIGIT_SHOW
MOV P0,#00H	;消除余辉
MOV P2,#18H ;位选第七数码管
MOV P0,38H ;显示38H单元的内容
LCALL DELAY_FOR_DIGIT_SHOW
MOV P0,#00H	;消除余辉
MOV P2,#1CH ;位选第八数码管
MOV P0,39H ;显示39H单元的内容
LCALL DELAY_FOR_DIGIT_SHOW
RET

;;;;;;;;;;;;;;;;;;;;;;;数码管动态显示延时程序;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DELAY_FOR_DIGIT_SHOW:
MOV 52H,#21H
DIGIT_LOOP:
DJNZ 52H,DIGIT_LOOP
RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;比赛开始程序;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
START_RACE:
SETB EA
SETB ET0
LCALL DISPLAY_NUMBER_CONTENT
;检测是否转换进制 P3.0
SETB P3.0
JB P3.0,CHECK_WHETHER_START
LCALL DELAY_KEYBOARD ;消抖
SETB P3.0
JB P3.0,CHECK_WHETHER_START
CPL 03H ;转换进制
CPL TR0 ;转换T0开关状态
TRANSFER_NOT_RELEASE:
LCALL DISPLAY_NUMBER_CONTENT
SETB P3.0
JNB P3.0,TRANSFER_NOT_RELEASE
LCALL DELAY_KEYBOARD ;消抖
SETB P3.0
JNB P3.0,TRANSFER_NOT_RELEASE
CHECK_WHETHER_START:
;检测开始比赛按钮 P3.1
SETB P3.1
JB P3.1,START_RACE ;比赛开始按钮没有按下
LCALL DELAY_KEYBOARD ;消抖
SETB P3.1
JB P3.1,START_RACE
;开始比赛按键按下，开定时器1、2中断，不允许加减分（不开外部中断）
SETB ET2
SETB ET1
SETB P1.0 ;准备计数脉冲
SETB P3.2 ;准备计分中断
SETB P3.3
CLR TR0 ;关闭进制蜂鸣
CHECK_START_BUTTON_UP: ;检查开始按钮是否松开
LCALL DISPLAY_NUMBER_CONTENT
SETB P3.1
JNB P3.1,CHECK_START_BUTTON_UP
LCALL DELAY_KEYBOARD ;消抖
SETB P3.1
JNB P3.1,CHECK_START_BUTTON_UP
;开始按钮松开，比赛开始
SETB 00H ;更新比赛开始标志位
SETB TR2 ;启动计数器计数
SETB TR1 ;启动定时器倒计时
SETB P3.0
SETB EX0 ;启动两队计分
SETB EX1
CLR 02H ;更新比赛暂停标志位
CLR 10H	;更新A队加分标志位
CLR 11H ;更新B队加分标志位
RET

;;;;;;;;;;;;;;;;;;;;;;;;;比赛中途程序;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SCAN_MATCH:
LCALL DISPLAY_NUMBER_CONTENT
JB P3.0,CHECK_A_TEAM ;检测暂停键是否按下
SETB P3.0
LCALL DELAY_KEYBOARD ;消抖
JB P3.0,CHECK_A_TEAM ;没有按下，继续
CPL 02H
JNB 02H,CANCEL_PAUSE
CLR TR2	;开始暂停
PAUSE_WAIT:
LCALL DISPLAY_NUMBER_CONTENT
SETB P3.0
JNB P3.0,PAUSE_WAIT
SETB P3.0
LCALL DELAY_KEYBOARD ;消抖
JNB P3.0,PAUSE_WAIT
AJMP CHECK_A_TEAM
CANCEL_PAUSE: ;取消暂停
LCALL DISPLAY_NUMBER_CONTENT
SETB P3.0
JNB P3.0,CANCEL_PAUSE
SETB P3.0
LCALL DELAY_KEYBOARD ;消抖
JNB P3.0,CANCEL_PAUSE
SETB TR2
CHECK_A_TEAM:
JNB 10H,CHECK_B_TEAM
LCALL TEAM_A_SCORE ;A队加分
CHECK_B_TEAM:
JNB 11H,CHECK_MATCH_END
LCALL TEAM_B_SCORE ;B队加分
CHECK_MATCH_END: ;检查比赛是否结束
JB 00H,SCAN_MATCH
RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;T2中断服务程序;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
T2INT:
CLR TF2
PUSH 0E0H ;保护累加器内容
PUSH 0D0H ;保护状态字
JNB 00H,AFTER_RACE_TIMER
CLR RS0
CLR RS1 ;换回0区
CJNE R0,#07H,TIME_THREE_DIGIT
;目前仍然是四位数
MOV A,R6 ;处理个位
JZ MINUS1 ;个位为0，需要借位
DEC R6
AJMP RETURNABLE
MINUS1:
MOV R6,#09H
MOV A,R5 ;处理十位
JZ MINUS2 ;十位为0，需要借位
DEC R5
AJMP RETURNABLE
MINUS2:
MOV R5,#09H
MOV A,R4 ;处理百位
JZ MINUS3 ;百位为0，需要借位
DEC R4
AJMP RETURNABLE
MINUS3:
MOV R4,#09H
DEC R3 ;处理千位
MOV A,R3
JNZ RETURNABLE
DEC R0 ;减完后只剩三位了，进行整体移动
MOV A,R4
MOV R3,A
MOV A,R5
MOV R4,A
MOV A,R6
MOV R5,A
AJMP RETURNABLE
TIME_THREE_DIGIT:
CJNE R0,#06H,TIME_TWO_DIGIT
;目前是三位数
MOV A,R5 ;处理个位
JZ MINUS4 ;个位为0，需要借位
DEC R5
AJMP RETURNABLE
MINUS4:
MOV R5,#09H
MOV A,R4 ;处理十位
JZ MINUS5 ;十位为0，需要借位
DEC R4
AJMP RETURNABLE
MINUS5:
MOV R4,#09H
DEC R3 ;处理百位
MOV A,R3
JNZ RETURNABLE
DEC R0 ;减完后只剩两位了，进行整体移动
MOV A,R4
MOV R3,A
MOV A,R5
MOV R4,A
AJMP RETURNABLE
TIME_TWO_DIGIT:
CJNE R0,#05H,TIME_ONE_DIGIT
;目前是两位数
MOV A,R4 ;处理个位
JZ MINUS6 ;个位为0，需要借位
DEC R4
AJMP RETURNABLE
MINUS6:
MOV R4,#09H
DEC R3 ;处理十位
MOV A,R3 
JNZ RETURNABLE
DEC R0 ;减完后只剩一位了，进行整体移动
MOV A,R4
MOV R3,A
AJMP RETURNABLE
TIME_ONE_DIGIT:
;目前是一位数
MOV A,R3 ;处理个位
JZ TIME_UP ;时间到（处理输入0的情况）
DEC R3
MOV A,R3
JZ TIME_UP ;减完后时间到
AJMP RETURNABLE
TIME_UP: ;时间到了
CLR TR1 ;关定时器
CLR 00H ;清比赛开始位
CLR 02H ;清比赛暂停位
DEC R0
AJMP RETURNABLE
AFTER_RACE_TIMER:
SETB RS0 ;换3区工作寄存器
SETB RS1
CPL 04H ;显示状态改变
JNB TR0,RETURNABLE ;T0不工作保留原音乐数据
MOV A,55H ;音乐步骤改变
CJNE A,#0DEH,NEXT_MUSIC
MOV 55H,#0CAH
AJMP READ_MUSIC
NEXT_MUSIC:
ADD A,#2
MOV 55H,A
READ_MUSIC:
MOV R0,55H
MOV R1,55H
INC R1
MOV 53H,@R0	;换音调
MOV 54H,@R1
RETURNABLE:
POP 0D0H ;恢复状态字
POP 0E0H ;恢复累加器
RETI

;;;;;;;;;;;;;;;;;;;;;;;;;;;;T1中断服务程序;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
T1INT:
CLR P1.0
SETB P1.0 ;给T2一个外部脉冲，使其计数
RETI

;;;;;;;;;;;;;;;;;;;;;;;;;;;;T0中断服务程序;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
T0INT:
CPL P1.5 ;蜂鸣器响
MOV TH0,53H
MOV TL0,54H
RETI ;用掉8个机器周期

;;;;;;;;;;;;;;;;;;;;;;外部中断0中断服务程序;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INT0INT:
CLR IE0 ;清中断标志位
SETB 10H ;A队加分置位
RETI

;;;;;;;;;;;;;;;;;;;;;;;;;;;;A方得分程序;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TEAM_A_SCORE: ;按下第三个键，是A方得分
JB 02H,DO_NOT_ADD_A ;比赛暂停
CLR 10H
LCALL DELAY_KEYBOARD ;消抖
JNB 10H,DO_NOT_ADD_A ;没有按下
CLR 10H
PUSH 0E0H ;保护累加器
MOV A,31H
JB 03H,A_ADDABLE ;十六进制无需清零
CJNE A,#99,A_ADDABLE
MOV 31H,#00H ;计分到达99分，清零
AJMP A_NOT_ADDABLE_TREATED
A_ADDABLE:
INC 31H
A_NOT_ADDABLE_TREATED:
POP 0E0H ;恢复累加器内容
SCAN_A:
LCALL DISPLAY_NUMBER_CONTENT
CLR 10H
JB 10H,SCAN_A
LCALL DELAY_KEYBOARD ;消抖
CLR 10H
JB 10H,SCAN_A
DO_NOT_ADD_A:
RET

;;;;;;;;;;;;;;;;;;;;;;外部中断1中断服务程序;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INT1INT:
CLR IE1 ;清中断标志位
SETB 11H ;A队加分置位
RETI

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;B方得分程序;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TEAM_B_SCORE: ;按下第四个键，是B方得分
JB 02H,DO_NOT_ADD_B ;比赛暂停
CLR 11H
LCALL DELAY_KEYBOARD ;消抖
JNB 11H,DO_NOT_ADD_B ;没有按下
PUSH 0E0H ;保护累加器
MOV A,30H
JB 03H,B_ADDABLE ;十六进制无需清零
CJNE A,#99,B_ADDABLE
MOV 30H,#00H ;计分到达99分，清零
AJMP B_NOT_ADDABLE_TREATED
B_ADDABLE:
INC 30H
B_NOT_ADDABLE_TREATED:
POP 0E0H ;恢复累加器内容
SCAN_B:
LCALL DISPLAY_NUMBER_CONTENT
CLR 11H
JB 11H,SCAN_B
LCALL DELAY_KEYBOARD ;消抖
CLR 11H
JB 11H,SCAN_B
DO_NOT_ADD_B:
RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;比赛结束程序;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
END_RACE:
CLR EX0
CLR EX1 ;禁止计数
SETB TR1 ;开始计时，播放音乐
SETB TR0 ;蜂鸣器响
;判断谁赢
MOV A,30H
CJNE A,31H,NEED_JUDGEMENT
MOV 40H,#10H ;平手
AJMP JUDGE_END
NEED_JUDGEMENT:
CLR C
SUBB A,31H
JC JUDGE_END
MOV 40H,#08H ;B队赢
JUDGE_END:
;计算点阵字符
;赢的队伍 (存于41H~48H)
MOV R2,#08H
MOV R1,#41H
MOV A,#90H
ADD A,40H
MOV R0,A
MOVE_MATRIX_CONTENT1:
MOV A,@R0
MOV @R1,A
INC R1
INC R0
DJNZ R2,MOVE_MATRIX_CONTENT1
;两队分数（存于49H~50H）
JB 03H,HEX_MATRIX
MOV A,31H
MOV B,#10
DIV AB
MOV R5,A
ADD A,R5
ADD A,#0A8H
MOV R0,A ;A队十位点阵地址
XCH A,B
MOV R5,A
ADD A,R5
ADD A,#0A8H
MOV R2,A ;A队个位点阵地址
MOV A,30H
MOV B,#10
DIV AB
MOV R5,A
ADD A,R5
ADD A,#0A8H
MOV R1,A ;B队十位点阵地址
XCH A,B
MOV R5,A
ADD A,R5
ADD A,#0A8H
MOV R3,A ;B队个位点阵地址
AJMP PREPARE_MATRIX_CONTENT_LOOP
HEX_MATRIX:
MOV A,31H
MOV B,#16
DIV AB
MOV R5,A
ADD A,R5
ADD A,#0A8H
MOV R0,A ;A队十六位点阵地址
XCH A,B
MOV R5,A
ADD A,R5
ADD A,#0A8H
MOV R2,A ;A队个位点阵地址
MOV A,30H
MOV B,#16
DIV AB
MOV R5,A
ADD A,R5
ADD A,#0A8H
MOV R1,A ;B队十六位点阵地址
XCH A,B
MOV R5,A
ADD A,R5
ADD A,#0A8H
MOV R3,A ;B队个位点阵地址
PREPARE_MATRIX_CONTENT_LOOP:
MOV 08H,#49H ;1区R0指向目标地址（前）
MOV 09H,#4AH ;1区R1指向目标地址（后）
MOV 0AH,#2 ;1区R2作为小循环计数器
MOV 0BH,#2 ;1区R3作为大循环计数器
MATRIX_CONTENT_LOOP:
MOV A,@R0 ;后四位
MOV B,@R1
ANL A,#0FH
SWAP A
ANL B,#0FH
ORL A,B
SETB RS0
MOV @R1,A
INC R1
INC R1
CLR RS0
MOV A,@R1 ;前四位
MOV B,@R0
ANL A,#0F0H
SWAP A
ANL B,#0F0H
ORL A,B
SETB RS0
MOV @R0,A
INC R0
INC R0
CLR RS0
INC R0
INC R1
DJNZ 0AH,MATRIX_CONTENT_LOOP
MOV R0,02H
MOV R1,03H
MOV 0AH,#02H
DJNZ 0BH,MATRIX_CONTENT_LOOP
DISPLAY_MATCH_RESULT:
SETB P3.0 ;检测是否要开关音乐
JB P3.0,DISPLAY_MATRIX_CONTENT
LCALL DELAY_KEYBOARD ;消抖
SETB P3.0
JB P3.0,DISPLAY_MATRIX_LED
CPL TR0
CHECK_CHANGE_MUSIC_UP:
LCALL DISPLAY_MATRIX_LED
SETB P3.0
JNB P3.0,CHECK_CHANGE_MUSIC_UP
LCALL DELAY_KEYBOARD ;消抖
SETB P3.0
JNB P3.0,CHECK_CHANGE_MUSIC_UP 
DISPLAY_MATRIX_CONTENT: 
LCALL DISPLAY_MATRIX_LED
SETB P3.1 ;检测是否重头开始
JB P3.1,DISPLAY_MATCH_RESULT
LCALL DELAY_KEYBOARD ;消抖
SETB P3.1
JB P3.1,DISPLAY_MATCH_RESULT
MOV 51H,#00H
LCALL MATRIX_SENDBYTE ;关闭点阵显示
SETB RCLK
NOP
NOP
CLR RCLK
SCAN_RELEASE_RESET:
SETB P3.1
JB P3.1,SCAN_RELEASE_RESET
LCALL DELAY_KEYBOARD ;消抖
SETB P3.1
JB P3.1,SCAN_RELEASE_RESET
RET

;;;;;;;;;;;;;;;;;;;;;;LED点阵显示程序;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DISPLAY_MATRIX_LED:
SETB RS0 ;换到1区工作寄存器
JB 04H,SECOND_CONDITION
MOV R0,#41H
AJMP MATRIX_DISP_FUNC
SECOND_CONDITION:
MOV R0,#49H
MATRIX_DISP_FUNC:
CLR SRCLK
CLR RCLK ;清空点阵时钟
MOV R5,#08H
MOV 56H,#7FH
MATRIX_DISP_LOOP:
MOV 51H,@R0
LCALL MATRIX_SENDBYTE
INC R0
MOV A,56H
MOV P0,A ;发送位码
RR A
MOV 56H,A
SETB RCLK ;给一个上升沿使595输出数据
NOP
NOP
CLR RCLK
LCALL DELAY_FOR_DIGIT_SHOW ;短延时
MOV 51H,#00H ;消除余辉
LCALL MATRIX_SENDBYTE
SETB RCLK ;给一个上升沿使595输出00H
NOP
NOP
CLR RCLK
LCALL DELAY_FOR_DIGIT_SHOW
DJNZ R5,MATRIX_DISP_LOOP
CLR RS0 ;换回0区
RET

;;;;;;;;;;;;;;;;;;;;;;;HC595发送字节程序;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MATRIX_SENDBYTE:
MOV A,51H
MOV B,#08H
SEND_BYTE_LOOP:
RLC A
MOV P3.4,C
SETB SRCLK ;拉高电平，发送数据
NOP
NOP
CLR SRCLK
DJNZ B,SEND_BYTE_LOOP
RET
END